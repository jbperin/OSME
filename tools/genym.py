import random

import osme
import music 
import euclid
import ym

Tempo = 120

currTonality = None
currScale = None
currCadence = None
currIdxInCadence = 0
currChord = None
eucl = None

def freq2register(frequency_in_Hz):
    TP=int(1000000/(16*frequency_in_Hz))
    return [TP//256, TP%256]

def prepareMusic():

    global currTonality, currScale, currCadence, currChord
    global eucl

    currTonality = list(music.scales.keys())[random.randrange(len(music.scales.keys()))]
    currScale = music.scales[currTonality]

    print (f"tonality = {currTonality}, current scale = {currScale}")

    numCadence = random.randrange(len(music.cadences))
    currCadence = music.cadences[numCadence]
    print (f"current cadence {numCadence} = {str(currCadence)}")
    print ("chords are : ")
    for numChord in currCadence:
        print (music.chords[numChord])
    currIdxInCadence = 0
    currChord = music.chords[currCadence[currIdxInCadence]]


def main ():
    global eucl

    aYM = ym.YM()

    theOSME = osme.OSME()
    theOSME.setTempo(Tempo)

    aYM.header['songTitle'] = "Essai"
    aYM.header['authorName'] = "JiBe"
    aYM.header['songComment'] = "Music generated by prog"

    prepareMusic()
    nbNoteInBar = random.randrange(2, 7)
    print (f"nbNote {nbNoteInBar}")
    eucl = euclid.Eucl(nbNoteInBar,8,0)
    curr_frame = {
        'r0'  : 0 , # "ToneAFine",
        'r1'  : 0 , # "ToneACoarse",
        'r2'  : 0 , # "ToneBFine",
        'r3'  : 0 , # "ToneBCoarse",
        'r4'  : 0 , # "ToneCFine",
        'r5'  : 0 , # "ToneCCoarse",
        'r6'  : 0 , # "NoiseGenerator",
        'r7'  : 0x3F, # "Mixer",
        'r10' : 0 , # "AmplitudeA",
        'r11' : 0 , # "AmplitudeB",
        'r12' : 0 , # "AmplitudeC",
        'r13' : 0 , # "EnvelopeFine",
        'r14' : 0 , # "EnvelopeCoarse",
        'r15' : 0 , # "EnvelopeShapeCycle",
        'r16' : 0 , # "IOA",
        'r17' : 0 # "IOB",
    }
    def applyChange(change):
        for ke in change.keys():
            curr_frame[ke] = change[ke]

    def beat(idxBeat):
        global currIdxInCadence, currChord
        global eucl
        # print (f"beat {idxBeat}")
        if ((idxBeat != 0) and (idxBeat%4 == 0)):
            currIdxInCadence = (currIdxInCadence + 1)%4
            currChord = music.chords[currCadence[currIdxInCadence]]
        if (idxBeat%4 == 0):
            [coar, fin] = freq2register(music.notefrequency[currScale[currChord[0]]]//2)
            applyChange({'r2': fin, 'r3': coar, 'r11':14})
            nbNoteInBar = random.randrange(2, 7)
            print (f"nbNote {nbNoteInBar}")
            eucl = euclid.Eucl(nbNoteInBar,8,0)

        #  0x9C = 1000000//(400*16)
        #list_frame.append({'r0': 0x9C, 'r1': 0, 'r7': 0xFE, 'r10':16, 'r13':0xE4, 'r14':0x18, 'r15':0})
        applyChange({'r7': 0xF8, 'r10':16, 'r13':0x42, 'r14':0x0f, 'r15':0xFF})

    def fraction(idxBeat, idxFraction):
        global eucl
        # print (f"fraction {idxBeat}.{idxFraction}")
        # Only play on half time or full time
        if (idxFraction%6 == 0):
            if (eucl.pulse() == "Pulse"):
                # Only play note of the chord on main tempo
                if (idxFraction == 0):
                    idxNote = currChord[random.randrange (len(currChord))]
                    currNote = currScale[idxNote]
                else:
                    currNote = currScale[random.randrange(len(currScale))]
                [coar, fin] = freq2register(music.notefrequency[currNote]*2)
                
                applyChange({'r4': fin, 'r5': coar, 'r12':15})
            else:
                applyChange({'r12':max(0,curr_frame['r12']-1)})
        
    def t50hz(idxBeat, idxFraction):
        # print (f"t50 {idxBeat}.{idxFraction}")
        # On last fraction before new beat, we silence sound using envoloppe to prepare next note
        if (idxFraction == 11):
            applyChange({'r10':0, 'r15':0x01})
        else:
            # alternate note on each IT 50Hz 
            if ((idxFraction%3) == 0):
                [coar, fin] = freq2register(music.notefrequency[currScale[currChord[0]]])
            elif ((idxFraction%3) == 1):
                [coar, fin] = freq2register(music.notefrequency[currScale[currChord[1]]])
            else:
                [coar, fin] = freq2register(music.notefrequency[currScale[currChord[2]]])
            applyChange({'r0': fin, 'r1': coar, 'r10':16,'r15':0xFF})
        
        aYM.addFrame(curr_frame)


    theOSME.regBeatCallback(beat)
    theOSME.regFractionCallback(fraction)
    theOSME.regT50HzCallback(t50hz)

    #8 bars * 4 beat/bar * 60/TEMPO(bpm) * 100 pulse/sec
    for i in range(int(16*4*(60/Tempo)*100)):
        # print (i)
        theOSME.pulse100ms()


    aYM.export('C:\\Perso\\myCode\\OSME\\tools\\output.ym')

if __name__ == '__main__':
    main()
